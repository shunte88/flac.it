#!/usr/bin/env python3

import os
import sys
import argparse
import logging
import fnmatch
import re
import glob
from pathlib import Path
import subprocess
from collections import defaultdict
import discogs_client
import contextlib

@contextlib.contextmanager
def ignored(*exceptions):
    try:
        yield
    except exceptions:
        pass


def run_command(cmd, exc=0):

    logging.debug(cmd)
    if 1 == exc:
        try:
            rc = subprocess.run(cmd, shell=True)
            if 0 == rc.returncode:
                return True
        except subprocess.CalledProcessError as err:
            logger.warning(err.output)
            return False
    return False


def process_folders(pattern, scratch_path, country, catalog):
    rs1 = re.compile(" (FLAC|Hi-Res|\- flac|- flac|Vinyl|CD|\(CD\))$")
    splits = " - "
    rs0 = re.compile(splits)
    clean = False
    cleanf = None
    fixes = {} # collect folders and driver attributes
    for path, dirs, _ in os.walk(os.path.abspath(scratch_path)):
        for dirname in fnmatch.filter(dirs, pattern):
            process = os.path.join(path, dirname)
            print(f"Process {process}")
            if cleanf and clean:
                d = Path(cleanf)
                if d.exists():
                    print(f"**** Delete {d}")
            cleanf = None
            clean = False
            found = False
            # rename or move folder as needed
            for _, dirsf, _ in os.walk(os.path.abspath(process)):
                found = True
                if dirsf:
                    _this = dirsf[0]
                    if rs0.search(_this):
                        srce = Path(process).joinpath(_this)
                        print(f"{srce}")
                        _artist, _album = _this.split(splits,1)
                        _artist = _artist.strip()
                        albumName = rs1.sub(' ', _album.strip())
                        albumName = albumName.strip()
                        # if the country and catalog are not specified
                        # open discogs and see if we can get a match
                        _album = f"{albumName} [{country}] [{catalog}]"
                        print(f"'{_artist}' \'{_album}\'")
                        # is there a folder - create and move
                        target = Path(path).joinpath(_artist)
                        detail = {'album':albumName,'artist':_artist}
                        if not target.is_dir():
                            print(f"creating '{target}' folder...")
                            target.mkdir(exist_ok=True) # safe
                        # move with rename
                        dest = target.joinpath(_album)
                        if not dest.exists():
                            print(f"move to '{dest}' folder...")
                            srce.replace(dest)
                            fixes[dest] = detail
                        else:
                            u = 0
                            uu = dest
                            while uu.exists():
                                u+=1
                                uu = Path(f"{dest} R{u}")
                            if not uu.exists():
                                print(f"move to '{uu}' folder...")
                                srce.replace(uu)
                                fixes[uu] = detail

            # no more folders - flag for cleanup
            if not found or not any(Path(process).iterdir()):
                if not any(Path(process).iterdir()): # safe but somewhat redundant
                    clean = True
                    cleanf = process

    if cleanf and clean:
        d = Path(cleanf)
        if d.exists():
            print(f"**** Delete {d}")
            d.rmdir()

    # renames should be in  effect but perform
    # standalone fix filenames - sub-folder or 
    # multi-disc NOT supported as yet
    for fix in fixes:
        _artist = fixes[fix]['artist']
        _album = fixes[fix]['album']
        cmd = f'cd "{fix}" && rename "s/^(\d+)\./01-\\1 -/ig" *.flac'
        print(f"........: {cmd}")
        run_command(cmd, 1)
        cmd = f'cd "{fix}" && rename "s/^.* - (\d+)/01-\\1 -/ig" *.flac'
        print(f"........: {cmd}")
        run_command(cmd, 1)
        cmd = f'cd "{fix}" && rename "s/^{_album}-0(\d+)-{_artist}-/01-\\1 - /ig" *.flac'
        print(f"........: {cmd}")
        run_command(cmd, 1)
        cmd = f'cd "{fix}" && mv -f folder.jpg cover.jpg'
        print(f"........: {cmd}")
        run_command(cmd, 1)
        cmd = f'cd "{fix}" && mv -f "{_album}.jpg" cover.jpg'
        print(f"........: {cmd}")
        run_command(cmd, 1)
        for file in ('checksums.md5', 'Folder.auCDtect.txt', 'foo_dr.txt', 'accurip.txt', f'{_artist} - {_album}.log', f'{_artist} - {_album}.m3u', '*.log'):
            cmd = f'cd "{fix}" && rm -f "{file}"'
            print(f"........: {cmd}")
            run_command(cmd, 1)

# \b(\w+(?:\s*\w*))\s+\1\b
def main(args):

    process_folders(args.filter+'*', args.directory,
        args.country, args.catalog)


log_file = '/tmp/fixflacfolders.log'
parser = argparse.ArgumentParser()

parser.add_argument('--country', '-c',
                    help='ISO Country Code (2char)',
                    type=str,
                    default=' ')
parser.add_argument('--catalog', '-i',
                    help='Catalog Number',
                    type=str,
                    default=' ')
parser.add_argument('--filter', '-f',
                    help='Folders to process (wildcards supported)',
                    type=str,
                    default='f24m')
parser.add_argument('--directory', '-d',
                    help='Base Directory',
                    type=str,
                    default='/hdd/scratch/')

args = parser.parse_args()

if __name__ == "__main__":

    log_format = '%(asctime)s %(levelname)-8s %(message)s'
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    formatter = logging.Formatter(log_format)
    console.setFormatter(formatter)
    logging.basicConfig(level=logging.DEBUG,
                        format=log_format,
                        datefmt='%m-%d-%y %H:%M',
                        filename=log_file,
                        filemode='a')

    logging.getLogger('').addHandler(console)

    main(args)

sys.exit(0)
