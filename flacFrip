#!/usr/bin/env python3

import os
import sys
import argparse
import logging
import fnmatch
import errno
import re
import glob
from pathlib import Path
import contextlib


@contextlib.contextmanager
def ignored(*exceptions):
    try:
        yield
    except exceptions:
        pass


def run_command(cmd, exc=0):

    logging.debug(cmd)
    if 1 == exc:
        try:
            rc = subprocess.run(cmd, shell=True)
            if 0 == rc.returncode:
                return True
        except subprocess.CalledProcessError as err:
            logger.warning(err.output)
            return False
    return False


def process_folders(pattern, scratch_path, country, catalog):
    rs1 = re.compile(" (FLAC|Hi-Res|Vinyl|CD|\(CD\))$")
    splits = " - "
    rs0 = re.compile(splits)
    clean = False
    cleanf = None
    for path, dirs, files in os.walk(os.path.abspath(scratch_path)):
        for name in fnmatch.filter(files, pattern):
            process = os.path.join(path, name)
            srce = Path(process)

            name = name.replace('\[ONTIVA.COM\] ','')
            name = name.replace('[ONTIVA.COM] ','')
            name = name.replace('-HD.flac','.flac')
            name = name.replace('-HQ.flac','.flac')

            _artist, _album = name.split(splits,1)

            _artist = _artist.strip()
            _album = _album.strip()

            _track = f"01-01 - {_album}"
            _album = _album.replace('.flac',f" [{country}] [{catalog}]")

            fname = f"{path}/{_artist}/{_album}/{_track}"
            print(f"Target: {fname}")

            if not os.path.exists(os.path.dirname(fname)):
                try:
                    os.makedirs(os.path.dirname(fname))
                except OSError as exc:
                    if exc.errno != errno.EEXIST:
                        raise

            # now move the source file to target
            srce.replace(fname)


# https://www.threshold-lovers.com/2020/10/04/alim-9v12v-top-niveau/
# scratch 536 - 2020
# \b(\w+(?:\s*\w*))\s+\1\b
def main(args):

    process_folders(args.filter+'*', args.directory, args.country, args.catalog)


log_file = '/tmp/fixflacfolders.log'
parser = argparse.ArgumentParser()

parser.add_argument('--filter', '-f',
                    help='Standalone FLAC files to process (wildcards supported)',
                    type=str,
                    default='*ONTIVA.COM*.flac')
parser.add_argument('--directory', '-d',
                    help='Base Directory',
                    type=str,
                    default='/hdd/scratch/')
parser.add_argument('--country', '-c',
                    help='ISO Country Code (2char)',
                    type=str,
                    default=' ')
parser.add_argument('--catalog', '-i',
                    help='Catalog Number',
                    type=str,
                    default=' ')


args = parser.parse_args()

if __name__ == "__main__":

    log_format = '%(asctime)s %(levelname)-8s %(message)s'
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    formatter = logging.Formatter(log_format)
    console.setFormatter(formatter)
    logging.basicConfig(level=logging.DEBUG,
                        format=log_format,
                        datefmt='%m-%d-%y %H:%M',
                        filename=log_file,
                        filemode='a')

    logging.getLogger('').addHandler(console)

    main(args)

sys.exit(0)
